[{"/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/App.js":"1","/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/index.js":"2","/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/components/Home.js":"3","/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/components/GameForm.js":"4"},{"size":178,"mtime":1606566674518,"results":"5","hashOfConfig":"6"},{"size":231,"mtime":1606566667181,"results":"7","hashOfConfig":"6"},{"size":2647,"mtime":1606573338819,"results":"8","hashOfConfig":"6"},{"size":2774,"mtime":1606495545342,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"130upj2",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/App.js",[],"/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/index.js",[],"/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/components/Home.js",["19","20","21","22","23","24","25","26"],"/Users/zakuraevs/Desktop/Aalto/cs/web/web-projects/game-pipeline/pipeline-frontend/src/components/GameForm.js",["27"],"import React, {useState, useRef} from 'react';\nconst { uuid } = require('uuidv4');\n\nconst GameForm = ({games, setGames}) => {\n\n  const newGameRef = useRef()\n  //const [highestIndex, setHighestindex] = useState(0)\n\n  const handleGameSubmit = (event) => {\n    const newGameTitle = newGameRef.current.value\n    const newIndex = games.length\n    console.log(\"Adding a game at index \" + newIndex)\n    if(newGameTitle === '') return\n    setGames(prevGames => {\n      //trash below with games.length?\n      return [...prevGames, {id: uuid(), title: newGameTitle, status: 'not completed', rank: newIndex}]\n    })\n    newGameRef.current.value = null\n  }\n\n  const handleDelete = (id) => {\n    const oldGames =[...games]\n    const newGames = oldGames.filter(g => g.id !== id)\n    setGames(newGames)\n\n  }\n\n  // improve below 2 functions!\n  const increaseRank = (id) => {\n    const oldGames =[...games]\n    // this is verbose\n    const increasingGame = oldGames.find(g => g.id === id)\n    if(increasingGame.rank === 0) return\n\n    const decreasingRank = increasingGame.rank-1\n\n    const decreasingGame = oldGames.find(g => g.rank === decreasingRank)\n\n    increasingGame.rank -= 1\n    decreasingGame.rank += 1\n\n    const newGamesWithDecreased = oldGames.map(g => g.rank === decreasingRank ? decreasingGame : g)\n    const newGamesWithIncreased = newGamesWithDecreased.map(g => g.id === id ? increasingGame : g)\n    \n    setGames(newGamesWithIncreased)\n  }\n\n  const decreaseRank = (id) => {}\n    /*const oldGames =[...games]\n    // this is verbose\n    const decreasingGame = oldGames.find(g => g.id === id)\n    if(decreasingGame.rank > games.length) return\n\n    const decreasingRank = increasingGame.rank-1\n\n    const decreasingGame = oldGames.find(g => g.rank === decreasingRank)\n\n    increasingGame.rank -= 1\n    decreasingGame.rank += 1\n\n    const newGamesWithDecreased = oldGames.map(g => g.rank === decreasingRank ? decreasingGame : g)\n    const newGamesWithIncreased = newGamesWithDecreased.map(g => g.id === id ? increasingGame : g)\n    \n    setGames(newGamesWithIncreased)\n  }*/\n\n  //const sortedByRank = games.sort((a, b) => (a.rank < b.rank) ? -1 : 1)\n\n  return (\n    <>\n      <input type=\"text\" ref={newGameRef}/>\n      <button onClick={handleGameSubmit}>Add</button>\n      <div>{games.length} games in the pipeline:</div>\n      <ul>\n        {games.map(game => \n          <div key={game.id}>\n            <li>\n              {game.title} - {game.status}\n              <button onClick={() => handleDelete(game.id)}>Remove</button>\n              <button onClick={() => increaseRank(game.id)}>↑</button>\n              <button onClick={() => decreaseRank(game.id)}>↓</button>\n            </li>\n          </div>\n        )}\n      </ul>\n      \n    </>\n  );\n}\n\nexport default GameForm;",{"ruleId":"28","severity":1,"message":"29","line":19,"column":9,"nodeType":"30","messageId":"31","endLine":19,"endColumn":11},{"ruleId":"28","severity":1,"message":"32","line":20,"column":9,"nodeType":"30","messageId":"31","endLine":20,"endColumn":11},{"ruleId":"28","severity":1,"message":"33","line":21,"column":9,"nodeType":"30","messageId":"31","endLine":21,"endColumn":11},{"ruleId":"28","severity":1,"message":"34","line":22,"column":9,"nodeType":"30","messageId":"31","endLine":22,"endColumn":11},{"ruleId":"28","severity":1,"message":"35","line":23,"column":9,"nodeType":"30","messageId":"31","endLine":23,"endColumn":11},{"ruleId":"28","severity":1,"message":"36","line":24,"column":9,"nodeType":"30","messageId":"31","endLine":24,"endColumn":11},{"ruleId":"28","severity":1,"message":"37","line":25,"column":9,"nodeType":"30","messageId":"31","endLine":25,"endColumn":18},{"ruleId":"28","severity":1,"message":"38","line":34,"column":18,"nodeType":"30","messageId":"31","endLine":34,"endColumn":26},{"ruleId":"28","severity":1,"message":"39","line":1,"column":16,"nodeType":"30","messageId":"31","endLine":1,"endColumn":24},"no-unused-vars","'s1' is assigned a value but never used.","Identifier","unusedVar","'s2' is assigned a value but never used.","'s3' is assigned a value but never used.","'s4' is assigned a value but never used.","'s5' is assigned a value but never used.","'s6' is assigned a value but never used.","'imgSource' is assigned a value but never used.","'setGames' is assigned a value but never used.","'useState' is defined but never used."]